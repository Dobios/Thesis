circuit Counter :
  module Counter :
    input clock : Clock
    input reset : UInt<1>
    input a : UInt<32>

    wire bb : { myVec : UInt<23>[5], flag : UInt<1>, f : { sign : UInt<1>, exponent : UInt<8>, significand : UInt<23>}} @[main.scala 22:16]
    node _bb_myVec_0_T = add(a, UInt<1>("h0")) @[main.scala 25:22]
    node _bb_myVec_0_T_1 = tail(_bb_myVec_0_T, 1) @[main.scala 25:22]
    bb.myVec[0] <= _bb_myVec_0_T_1 @[main.scala 25:17]
    node _bb_myVec_1_T = add(a, UInt<1>("h1")) @[main.scala 25:22]
    node _bb_myVec_1_T_1 = tail(_bb_myVec_1_T, 1) @[main.scala 25:22]
    bb.myVec[1] <= _bb_myVec_1_T_1 @[main.scala 25:17]
    node _bb_myVec_2_T = add(a, UInt<2>("h2")) @[main.scala 25:22]
    node _bb_myVec_2_T_1 = tail(_bb_myVec_2_T, 1) @[main.scala 25:22]
    bb.myVec[2] <= _bb_myVec_2_T_1 @[main.scala 25:17]
    node _bb_myVec_3_T = add(a, UInt<2>("h3")) @[main.scala 25:22]
    node _bb_myVec_3_T_1 = tail(_bb_myVec_3_T, 1) @[main.scala 25:22]
    bb.myVec[3] <= _bb_myVec_3_T_1 @[main.scala 25:17]
    node _bb_myVec_4_T = add(a, UInt<3>("h4")) @[main.scala 25:22]
    node _bb_myVec_4_T_1 = tail(_bb_myVec_4_T, 1) @[main.scala 25:22]
    bb.myVec[4] <= _bb_myVec_4_T_1 @[main.scala 25:17]
    node _bb_flag_T = add(bb.myVec[0], UInt<1>("h0")) @[main.scala 28:51]
    node _bb_flag_T_1 = tail(_bb_flag_T, 1) @[main.scala 28:51]
    node _bb_flag_T_2 = add(bb.myVec[1], _bb_flag_T_1) @[main.scala 28:51]
    node _bb_flag_T_3 = tail(_bb_flag_T_2, 1) @[main.scala 28:51]
    node _bb_flag_T_4 = add(bb.myVec[2], _bb_flag_T_3) @[main.scala 28:51]
    node _bb_flag_T_5 = tail(_bb_flag_T_4, 1) @[main.scala 28:51]
    node _bb_flag_T_6 = add(bb.myVec[3], _bb_flag_T_5) @[main.scala 28:51]
    node _bb_flag_T_7 = tail(_bb_flag_T_6, 1) @[main.scala 28:51]
    node _bb_flag_T_8 = add(bb.myVec[4], _bb_flag_T_7) @[main.scala 28:51]
    node _bb_flag_T_9 = tail(_bb_flag_T_8, 1) @[main.scala 28:51]
    node _bb_flag_T_10 = leq(_bb_flag_T_9, a) @[main.scala 28:58]
    bb.flag <= _bb_flag_T_10 @[main.scala 28:11]
    bb.f.sign <= bb.flag @[main.scala 29:13]
    bb.f.exponent <= UInt<1>("h1") @[main.scala 30:17]
    bb.f.significand <= UInt<1>("h1") @[main.scala 31:20]
    node _T = eq(a, bb.f.sign) @[main.scala 33:12]
    node _T_1 = bits(reset, 0, 0) @[main.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[main.scala 33:9]
    when _T_2 : @[main.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "Assertion failed: Stupid convoluted test module\n") : assert @[main.scala 33:9]